# -*- coding: utf-8 -*-
"""codigo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AxaRYg7clC4HNOU-96lgfOcQPdzfJH-W
"""

# Datos de la velocidad en millas por hora
velocidades_mph = [0, 14, 39, 69, 95, 114, 129, 139]

# Convertimos las velocidades de millas por hora a millas por segundo
velocidades_mps = [v / 3600 for v in velocidades_mph]

# Intervalo de tiempo en segundos (t = 0 a t = 7)
tiempos = list(range(8))  # [0, 1, 2, 3, 4, 5, 6, 7]
h = tiempos[1] - tiempos[0]  # El intervalo de tiempo entre puntos es constante y es 1 segundo

# Método del trapecio
def metodo_trapecio(velocidades, h):
    n = len(velocidades) - 1
    area = (velocidades[0] + velocidades[n]) / 2
    for i in range(1, n):
        area += velocidades[i]
    return area * h

# Método de Simpson 1/3
def metodo_simpson(velocidades, h):
    n = len(velocidades) - 1
    if n % 2 != 0:
        raise ValueError("Simpson 1/3 requiere un número par de intervalos.")

    area = velocidades[0] + velocidades[n]
    for i in range(1, n, 2):
        area += 4 * velocidades[i]
    for i in range(2, n-1, 2):
        area += 2 * velocidades[i]
    return area * h / 3

# Cálculo combinado: Simpson 1/3 para los primeros 7 puntos y Trapecio para el último intervalo
def metodo_combinado(velocidades, h):
    # Método de Simpson 1/3 en los primeros 7 puntos (0 a 6)
    distancia_simpson = metodo_simpson(velocidades[:7], h)

    # Método del trapecio en el último intervalo (6 a 7)
    distancia_trapecio_final = (velocidades[6] + velocidades[7]) * h / 2

    return distancia_simpson + distancia_trapecio_final

# Cálculo de la distancia utilizando ambos métodos
distancia_trapecio = metodo_trapecio(velocidades_mps, h)
distancia_combinada = metodo_combinado(velocidades_mps, h)

print("Distancia con el Método del Trapecio:", distancia_trapecio, "millas")
print("Distancia con el Método Simpson 1/3 ):", distancia_combinada, "millas")